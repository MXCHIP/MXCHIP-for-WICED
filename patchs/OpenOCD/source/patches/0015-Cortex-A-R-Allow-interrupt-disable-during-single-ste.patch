From 364ec47d344deff7276880b21bfe5b44da39c1db Mon Sep 17 00:00:00 2001
From: Broadcom WICED <broadcom_wiced@broadcom.local>
Date: Mon, 30 Jun 2014 20:48:43 -0700
Subject: [PATCH 19/30] Cortex A/R : Allow interrupt disable during single-step

---
 src/target/cortex_a.c | 85 +++++++++++++++++++++++++++++++++++++++++++++++++++
 src/target/cortex_a.h |  8 +++++
 2 files changed, 93 insertions(+)

diff --git a/src/target/cortex_a.c b/src/target/cortex_a.c
index ea0fea1..6e94f18 100644
--- a/src/target/cortex_a.c
+++ b/src/target/cortex_a.c
@@ -1338,9 +1338,31 @@ static int cortex_a_post_debug_entry(struct target *target)
 	return ERROR_OK;
 }
 
+int cortex_a_set_dscr_bits(struct target *target, unsigned long bit_mask, unsigned long value)
+{
+	struct armv7a_common *armv7a = target_to_armv7a(target);
+	struct adiv5_dap *swjdp = armv7a->arm.dap;
+	uint32_t dscr;
+
+	/* Read DSCR */
+	int retval = mem_ap_sel_read_atomic_u32(swjdp, armv7a->debug_ap,
+			armv7a->debug_base + CPUDBG_DSCR, &dscr);
+	if (ERROR_OK != retval)
+		return retval;
+
+	dscr |= (value & bit_mask);
+	dscr &= (value | (~bit_mask));
+
+	/* write new DSCR */
+	retval = mem_ap_sel_write_atomic_u32(swjdp, armv7a->debug_ap,
+			armv7a->debug_base + CPUDBG_DSCR, dscr);
+	return retval;
+}
+
 static int cortex_a_step(struct target *target, int current, uint32_t address,
 	int handle_breakpoints)
 {
+	struct cortex_a_common *cortex_a = target_to_cortex_a(target);
 	struct armv7a_common *armv7a = target_to_armv7a(target);
 	struct arm *arm = &armv7a->arm;
 	struct breakpoint *breakpoint = NULL;
@@ -1378,6 +1400,14 @@ static int cortex_a_step(struct target *target, int current, uint32_t address,
 	stepbreakpoint.type = BKPT_HARD;
 	stepbreakpoint.set = 0;
 
+	/* Disable interrupts during single step if requested */
+	if (cortex_a->isrmasking_mode == CORTEX_A_ISRMASK_ON)
+	{
+		retval = cortex_a_set_dscr_bits(target, DSCR_INT_DIS, DSCR_INT_DIS);
+		if (ERROR_OK != retval)
+			return retval;
+	}
+
 	/* Break on IVA mismatch */
 	cortex_a_set_breakpoint(target, &stepbreakpoint, 0x04);
 
@@ -1400,6 +1430,15 @@ static int cortex_a_step(struct target *target, int current, uint32_t address,
 
 	cortex_a_unset_breakpoint(target, &stepbreakpoint);
 
+	/* Re-enable interrupts if they were disabled */
+	if (cortex_a->isrmasking_mode == CORTEX_A_ISRMASK_ON)
+	{
+		retval = cortex_a_set_dscr_bits(target, DSCR_INT_DIS, 0);
+		if (ERROR_OK != retval)
+			return retval;
+	}
+
+
 	target->debug_reason = DBG_REASON_BREAKPOINT;
 
 	if (breakpoint)
@@ -3322,6 +3361,38 @@ COMMAND_HANDLER(cortex_a_handle_smp_gdb_command)
 	return ERROR_OK;
 }
 
+COMMAND_HANDLER(handle_cortex_a_mask_interrupts_command)
+{
+	struct target *target = get_current_target(CMD_CTX);
+	struct cortex_a_common *cortex_a = target_to_cortex_a(target);
+
+	static const Jim_Nvp nvp_maskisr_modes[] = {
+		{ .name = "auto", .value = CORTEX_A_ISRMASK_AUTO },
+		{ .name = "off", .value = CORTEX_A_ISRMASK_OFF },
+		{ .name = "on", .value = CORTEX_A_ISRMASK_ON },
+		{ .name = NULL, .value = -1 },
+	};
+	const Jim_Nvp *n;
+
+	if (target->state != TARGET_HALTED) {
+		command_print(CMD_CTX, "target must be stopped for \"%s\" command", CMD_NAME);
+		return ERROR_OK;
+	}
+
+	if (CMD_ARGC > 0) {
+		n = Jim_Nvp_name2value_simple(nvp_maskisr_modes, CMD_ARGV[0]);
+		if (n->name == NULL)
+			return ERROR_COMMAND_SYNTAX_ERROR;
+		cortex_a->isrmasking_mode = n->value;
+
+	}
+
+	n = Jim_Nvp_value2name_simple(nvp_maskisr_modes, cortex_a->isrmasking_mode);
+	command_print(CMD_CTX, "cortex_a interrupt mask %s", n->name);
+
+	return ERROR_OK;
+}
+
 static const struct command_registration cortex_a_exec_command_handlers[] = {
 	{
 		.name = "cache_info",
@@ -3356,6 +3427,13 @@ static const struct command_registration cortex_a_exec_command_handlers[] = {
 		.help = "display/fix current core played to gdb",
 		.usage = "",
 	},
+	{
+		.name = "maskisr",
+		.handler = handle_cortex_a_mask_interrupts_command,
+		.mode = COMMAND_EXEC,
+		.help = "mask cortex_a interrupts",
+		.usage = "['auto'|'on'|'off']",
+	},
 
 
 	COMMAND_REGISTRATION_DONE
@@ -3435,6 +3513,13 @@ static const struct command_registration cortex_r4_exec_command_handlers[] = {
 		.help = "Initialize core debug",
 		.usage = "",
 	},
+	{
+		.name = "maskisr",
+		.handler = handle_cortex_a_mask_interrupts_command,
+		.mode = COMMAND_EXEC,
+		.help = "mask cortex_r4 interrupts",
+		.usage = "['auto'|'on'|'off']",
+	},
 
 	COMMAND_REGISTRATION_DONE
 };
diff --git a/src/target/cortex_a.h b/src/target/cortex_a.h
index ebf79b8..bf75e77 100644
--- a/src/target/cortex_a.h
+++ b/src/target/cortex_a.h
@@ -55,6 +55,12 @@
 
 #define CORTEX_A_PADDRDBG_CPU_SHIFT 13
 
+enum cortex_a_isrmasking_mode {
+	CORTEX_A_ISRMASK_AUTO,
+	CORTEX_A_ISRMASK_OFF,
+	CORTEX_A_ISRMASK_ON,
+};
+
 struct cortex_a_brp {
 	int used;
 	int type;
@@ -91,6 +97,8 @@ struct cortex_a_common {
 	uint32_t ttypr;
 	uint32_t didr;
 
+	enum cortex_a_isrmasking_mode isrmasking_mode;
+
 	struct armv7a_common armv7a_common;
 
 };
-- 
1.8.3.msysgit.0

