From f469d343cd5b49be50cf6e30458a4159938dae9c Mon Sep 17 00:00:00 2001
From: Broadcom WICED <broadcom_wiced@broadcom.local>
Date: Tue, 19 May 2015 15:09:57 +0100
Subject: [PATCH] Cortex-A: Revert changes which break the sflash writer app -
 it can no longer program the PC correctly and halting after resume fails

---
 src/target/cortex_a.c | 178 +++++++++++---------------------------------------
 1 file changed, 38 insertions(+), 140 deletions(-)

diff --git a/src/target/cortex_a.c b/src/target/cortex_a.c
index f7ef906..59e497f 100644
--- a/src/target/cortex_a.c
+++ b/src/target/cortex_a.c
@@ -20,9 +20,6 @@
  *   Copyright (C) Broadcom 2012                                           *
  *   ehunter@broadcom.com : Cortex R4 support                              *
  *                                                                         *
- *   Copyright (C) 2013 Kamal Dasu                                         *
- *   kdasu.kdev@gmail.com                                                  *
- *                                                                         *
  *   This program is free software; you can redistribute it and/or modify  *
  *   it under the terms of the GNU General Public License as published by  *
  *   the Free Software Foundation; either version 2 of the License, or     *
@@ -147,14 +144,14 @@ static int cortex_a_mmu_modify(struct target *target, int enable)
 					cortex_a->cp15_control_reg_curr);
 		}
 	} else {
+		if (cortex_a->cp15_control_reg_curr & 0x4U) {
+			/*  data cache is active */
+			cortex_a->cp15_control_reg_curr &= ~0x4U;
+			/* flush data cache armv7 function to be called */
+			if (armv7a->armv7a_mmu.armv7a_cache.flush_all_data_cache)
+				armv7a->armv7a_mmu.armv7a_cache.flush_all_data_cache(target);
+		}
 		if ((cortex_a->cp15_control_reg_curr & 0x1U)) {
-			if (cortex_a->cp15_control_reg_curr & 0x4U) {
-				/* data cache is active */
-				cortex_a->cp15_control_reg_curr &= ~0x4U;
-				/* flush data cache armv7 function to be called */
-				if (armv7a->armv7a_mmu.armv7a_cache.flush_all_data_cache)
-					armv7a->armv7a_mmu.armv7a_cache.flush_all_data_cache(target);
-			}
 			cortex_a->cp15_control_reg_curr &= ~0x1U;
 			retval = armv7a->arm.mcr(target, 15,
 					0, 0,	/* op1, op2 */
@@ -168,11 +165,12 @@ static int cortex_a_mmu_modify(struct target *target, int enable)
 /*
  * Cortex-A Basic debug access, very low level assumes state is saved
  */
-static int cortex_a8_init_debug_access(struct target *target)
+static int cortex_a_init_debug_access(struct target *target)
 {
 	struct armv7a_common *armv7a = target_to_armv7a(target);
 	struct adiv5_dap *swjdp = armv7a->arm.dap;
 	int retval;
+	uint32_t dummy;
 
 	LOG_DEBUG(" ");
 
@@ -188,59 +186,12 @@ static int cortex_a8_init_debug_access(struct target *target)
 			LOG_USER(
 				"Locking debug access failed on first, but succeeded on second try.");
 	}
-
-	return retval;
-}
-
-/*
- * Cortex-A Basic debug access, very low level assumes state is saved
- */
-static int cortex_a_init_debug_access(struct target *target)
-{
-	struct armv7a_common *armv7a = target_to_armv7a(target);
-	struct adiv5_dap *swjdp = armv7a->arm.dap;
-	int retval;
-	uint32_t dbg_osreg;
-	uint32_t cortex_part_num;
-	struct cortex_a_common *cortex_a = target_to_cortex_a(target);
-
-	LOG_DEBUG(" ");
-	cortex_part_num = (cortex_a->cpuid & CORTEX_A_MIDR_PARTNUM_MASK) >>
-		CORTEX_A_MIDR_PARTNUM_SHIFT;
-
-	switch (cortex_part_num) {
-	case CORTEX_A7_PARTNUM:
-	case CORTEX_A15_PARTNUM:
-		retval = mem_ap_sel_read_atomic_u32(swjdp, armv7a->debug_ap,
-						    armv7a->debug_base + CPUDBG_OSLSR,
-						    &dbg_osreg);
-		if (retval != ERROR_OK)
-			return retval;
-
-		LOG_DEBUG("DBGOSLSR  0x%" PRIx32, dbg_osreg);
-
-		if (dbg_osreg & CPUDBG_OSLAR_LK_MASK)
-			/* Unlocking the DEBUG OS registers for modification */
-			retval = mem_ap_sel_write_atomic_u32(swjdp, armv7a->debug_ap,
-							     armv7a->debug_base + CPUDBG_OSLAR,
-							     0);
-		break;
-
-	case CORTEX_A5_PARTNUM:
-	case CORTEX_A8_PARTNUM:
-	case CORTEX_A9_PARTNUM:
-	default:
-		retval = cortex_a8_init_debug_access(target);
-	}
-
 	if (retval != ERROR_OK)
 		return retval;
 	/* Clear Sticky Power Down status Bit in PRSR to enable access to
 	   the registers in the Core Power Domain */
 	retval = mem_ap_sel_read_atomic_u32(swjdp, armv7a->debug_ap,
-			armv7a->debug_base + CPUDBG_PRSR, &dbg_osreg);
-	LOG_DEBUG("target->coreid %" PRId32 " DBGPRSR  0x%" PRIx32, target->coreid, dbg_osreg);
-
+			armv7a->debug_base + CPUDBG_PRSR, &dummy);
 	if (retval != ERROR_OK)
 		return retval;
 
@@ -252,30 +203,6 @@ static int cortex_a_init_debug_access(struct target *target)
 	return cortex_a_poll(target);
 }
 
-static int cortex_a_wait_instrcmpl(struct target *target, uint32_t *dscr, bool force)
-{
-	/* Waits until InstrCmpl_l becomes 1, indicating instruction is done.
-	 * Writes final value of DSCR into *dscr. Pass force to force always
-	 * reading DSCR at least once. */
-	struct armv7a_common *armv7a = target_to_armv7a(target);
-	struct adiv5_dap *swjdp = armv7a->arm.dap;
-	long long then = timeval_ms();
-	while ((*dscr & DSCR_INSTR_COMP) == 0 || force) {
-		force = false;
-		int retval = mem_ap_sel_read_atomic_u32(swjdp, armv7a->debug_ap,
-				armv7a->debug_base + CPUDBG_DSCR, dscr);
-		if (retval != ERROR_OK) {
-			LOG_ERROR("Could not read DSCR register");
-			return retval;
-		}
-		if (timeval_ms() > then + 1000) {
-			LOG_ERROR("Timeout waiting for InstrCompl=1");
-			return ERROR_FAIL;
-		}
-	}
-	return ERROR_OK;
-}
-
 /* To reduce needless round-trips, pass in a pointer to the current
  * DSCR value.  Initialize it to zero if you just need to know the
  * value on return from this function; or DSCR_INSTR_COMP if you
@@ -294,16 +221,26 @@ static int cortex_a_exec_opcode(struct target *target,
 	LOG_DEBUG("exec opcode 0x%08" PRIx32, opcode);
 
 	/* Wait for InstrCompl bit to be set */
-	retval = cortex_a_wait_instrcmpl(target, dscr_p, false);
-	if (retval != ERROR_OK)
-		return retval;
+	long long then = timeval_ms();
+	while ((dscr & DSCR_INSTR_COMP) == 0) {
+		retval = mem_ap_sel_read_atomic_u32(swjdp, armv7a->debug_ap,
+				armv7a->debug_base + CPUDBG_DSCR, &dscr);
+		if (retval != ERROR_OK) {
+			LOG_ERROR("Could not read DSCR register, opcode = 0x%08" PRIx32, opcode);
+			return retval;
+		}
+		if (timeval_ms() > then + 1000) {
+			LOG_ERROR("Timeout waiting for cortex_a_exec_opcode");
+			return ERROR_FAIL;
+		}
+	}
 
 	retval = mem_ap_sel_write_u32(swjdp, armv7a->debug_ap,
 			armv7a->debug_base + CPUDBG_ITR, opcode);
 	if (retval != ERROR_OK)
 		return retval;
 
-	long long then = timeval_ms();
+	then = timeval_ms();
 	do {
 		retval = mem_ap_sel_read_atomic_u32(swjdp, armv7a->debug_ap,
 				armv7a->debug_base + CPUDBG_DSCR, &dscr);
@@ -2023,7 +1960,8 @@ static int cortex_a_deassert_reset(struct target *target)
 }
 
 
-static int cortex_a_write_apb_ab_memory_slow(struct target *target,
+
+static int cortex_a_write_apb_ab_memory_bytes_slow(struct target *target,
 	uint32_t address, uint32_t nbytes, const uint8_t *buffer)
 {
 	int retval;
@@ -2123,7 +2061,7 @@ static int cortex_a_write_apb_ab_memory(struct target *target,
 	if (bytes_unaligned_at_start != 0)
 	{
 		LOG_DEBUG("Unaligned - %" PRId32 " bytes at start", bytes_unaligned_at_start);
-		retval = cortex_a_write_apb_ab_memory_slow( target,
+		retval = cortex_a_write_apb_ab_memory_bytes_slow( target,
 			address, bytes_unaligned_at_start, buffer);
 		if (retval != ERROR_OK)
 			goto error_w;
@@ -2225,7 +2163,7 @@ static int cortex_a_write_apb_ab_memory(struct target *target,
 		address += total_u32 << 2;
 
 		LOG_DEBUG("Unaligned - %" PRId32 " bytes at end", bytes_unaligned_at_end);
-		retval = cortex_a_write_apb_ab_memory_slow( target,
+		retval = cortex_a_write_apb_ab_memory_bytes_slow( target,
 			address, bytes_unaligned_at_end, buffer);
 		if (retval != ERROR_OK)
 			goto error_w;
@@ -2248,7 +2186,8 @@ error_w:
 	return ERROR_FAIL;
 }
 
-static int cortex_a_read_apb_ab_memory_slow(struct target *target,
+
+static int cortex_a_read_apb_ab_memory_bytes_slow(struct target *target,
 	uint32_t address, uint32_t nbytes, uint8_t *buffer)
 {
 	int retval;
@@ -2355,7 +2294,7 @@ static int cortex_a_read_apb_ab_memory(struct target *target,
 	if (bytes_unaligned_at_start != 0)
 	{
 		LOG_DEBUG("Unaligned - %" PRId32 " bytes at start", bytes_unaligned_at_start);
-		retval = cortex_a_read_apb_ab_memory_slow( target,
+		retval = cortex_a_read_apb_ab_memory_bytes_slow( target,
 			address, bytes_unaligned_at_start, buffer);
 		if (retval != ERROR_OK)
 			goto error_r;
@@ -2476,7 +2415,7 @@ static int cortex_a_read_apb_ab_memory(struct target *target,
 		address += total_u32 << 2;
 
 		LOG_DEBUG("Unaligned - %" PRId32 " bytes at end", bytes_unaligned_at_end);
-		retval = cortex_a_read_apb_ab_memory_slow( target,
+		retval = cortex_a_read_apb_ab_memory_bytes_slow( target,
 			address, bytes_unaligned_at_end, buffer);
 		if (retval != ERROR_OK)
 			goto error_r;
@@ -2572,8 +2511,7 @@ static int cortex_a_read_memory(struct target *target, uint32_t address,
 				  virt, phys);
 			address = phys;
 		}
-		retval = cortex_a_read_phys_memory(target, address, size,
-			    count, buffer);
+		retval = cortex_a_read_phys_memory(target, address, size, count, buffer);
 	} else {
 		if (mmu_enabled) {
 			retval = cortex_a_check_address(target, address);
@@ -2773,7 +2711,7 @@ static int cortex_a_examine_first(struct target *target)
 	struct adiv5_dap *swjdp = armv7a->arm.dap;
 	int i;
 	int retval = ERROR_OK;
-	uint32_t didr, ctypr, ttypr, cpuid, dbg_osreg;
+	uint32_t didr, ctypr, ttypr, cpuid;
 
 	/* We do one extra read to ensure DAP is configured,
 	 * we call ahbap_debugport_init(swjdp) instead
@@ -2812,11 +2750,8 @@ static int cortex_a_examine_first(struct target *target)
 		/* Lookup 0x15 -- Processor DAP */
 		retval = dap_lookup_cs_component(swjdp, 1, dbgbase, 0x15,
 				&armv7a->debug_base, &coreidx);
-		if (retval != ERROR_OK) {
-			LOG_ERROR("Can't detect %s's dbgbase from the ROM table; you need to specify it explicitly.",
-				  target->cmd_name);
+		if (retval != ERROR_OK)
 			return retval;
-		}
 		LOG_DEBUG("Detected core %" PRId32 " dbgbase: %08" PRIx32,
 			  coreidx, armv7a->debug_base);
 	} else
@@ -2860,43 +2795,6 @@ static int cortex_a_examine_first(struct target *target)
 	LOG_DEBUG("ttypr = 0x%08" PRIx32, ttypr);
 	LOG_DEBUG("didr = 0x%08" PRIx32, didr);
 
-	cortex_a->cpuid = cpuid;
-	cortex_a->ctypr = ctypr;
-	cortex_a->ttypr = ttypr;
-	cortex_a->didr = didr;
-
-	/* Unlocking the debug registers */
-	if ((cpuid & CORTEX_A_MIDR_PARTNUM_MASK) >> CORTEX_A_MIDR_PARTNUM_SHIFT ==
-		CORTEX_A15_PARTNUM) {
-
-		retval = mem_ap_sel_write_atomic_u32(swjdp, armv7a->debug_ap,
-						     armv7a->debug_base + CPUDBG_OSLAR,
-						     0);
-
-		if (retval != ERROR_OK)
-			return retval;
-
-	}
-	/* Unlocking the debug registers */
-	if ((cpuid & CORTEX_A_MIDR_PARTNUM_MASK) >> CORTEX_A_MIDR_PARTNUM_SHIFT ==
-		CORTEX_A7_PARTNUM) {
-
-		retval = mem_ap_sel_write_atomic_u32(swjdp, armv7a->debug_ap,
-						     armv7a->debug_base + CPUDBG_OSLAR,
-						     0);
-
-		if (retval != ERROR_OK)
-			return retval;
-
-	}
-	retval = mem_ap_sel_read_atomic_u32(swjdp, armv7a->debug_ap,
-					    armv7a->debug_base + CPUDBG_PRSR, &dbg_osreg);
-
-	if (retval != ERROR_OK)
-		return retval;
-
-	LOG_DEBUG("target->coreid %" PRId32 " DBGPRSR  0x%" PRIx32, target->coreid, dbg_osreg);
-
 	armv7a->arm.core_type = ARM_MODE_MON;
 	retval = cortex_a_dpm_setup(cortex_a, didr);
 	if (retval != ERROR_OK)
@@ -2906,7 +2804,6 @@ static int cortex_a_examine_first(struct target *target)
 	cortex_a->brp_num = ((didr >> 24) & 0x0F) + 1;
 	cortex_a->brp_num_context = ((didr >> 20) & 0x0F) + 1;
 	cortex_a->brp_num_available = cortex_a->brp_num;
-	free(cortex_a->brp_list);
 	cortex_a->brp_list = calloc(cortex_a->brp_num, sizeof(struct cortex_a_brp));
 /*	cortex_a->brb_enabled = ????; */
 	for (i = 0; i < cortex_a->brp_num; i++) {
@@ -2930,8 +2827,9 @@ static int cortex_a_examine(struct target *target)
 {
 	int retval = ERROR_OK;
 
-	/* Reestablish communication after target reset */
-	retval = cortex_a_examine_first(target);
+	/* don't re-probe hardware after each reset */
+	if (!target_was_examined(target))
+		retval = cortex_a_examine_first(target);
 
 	/* Configure core debug access */
 	if (retval == ERROR_OK)
-- 
1.8.3.msysgit.0

