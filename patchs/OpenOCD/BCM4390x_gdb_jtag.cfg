#
# Copyright 2016, Cypress Semiconductor Corporation or a subsidiary of 
 # Cypress Semiconductor Corporation. All Rights Reserved.
 # This software, including source code, documentation and related
 # materials ("Software"), is owned by Cypress Semiconductor Corporation
 # or one of its subsidiaries ("Cypress") and is protected by and subject to
 # worldwide patent protection (United States and foreign),
 # United States copyright laws and international treaty provisions.
 # Therefore, you may use this Software only as provided in the license
 # agreement accompanying the software package from which you
 # obtained this Software ("EULA").
 # If no EULA applies, Cypress hereby grants you a personal, non-exclusive,
 # non-transferable license to copy, modify, and compile the Software
 # source code solely for use in connection with Cypress's
 # integrated circuit products. Any reproduction, modification, translation,
 # compilation, or representation of this Software except as specified
 # above is prohibited without the express written permission of Cypress.
 #
 # Disclaimer: THIS SOFTWARE IS PROVIDED AS-IS, WITH NO WARRANTY OF ANY KIND,
 # EXPRESS OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, NONINFRINGEMENT, IMPLIED
 # WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. Cypress
 # reserves the right to make changes to the Software without notice. Cypress
 # does not assume any liability arising out of the application or use of the
 # Software or any product or circuit described in the Software. Cypress does
 # not authorize its products for use in any products where a malfunction or
 # failure of the Cypress product may reasonably be expected to result in
 # significant property damage, injury or death ("High Risk Product"). By
 # including Cypress's product in a High Risk Product, the manufacturer
 # of such system or application assumes all risk of such use and in doing
 # so agrees to indemnify Cypress against all liability.
#

# Function to read a word from memory
proc memread32 {address} {
    mem2array memar 32 $address 1
    return $memar(0)
}

# default ports
telnet_port 4444
gdb_port 3333
gdb_memory_map enable


init

reset halt

cortex_r4 maskisr on

# Force use of hardware breakpoints. Software breakpoints currently cause the processor to get stuck when the icache is enabled
gdb_breakpoint_override hard

# Force backplane run on fast HT clock (160Mhz) even in sleep mode.
# Alternatively we should be able to keep talking to board even in sleep mode
# if switch adapter frequency to below ILP clock (32Khz) after image is downloaded.
set CHIPC_CCS_REG 0x180001e0
set ccs_reg_val [memread32 $CHIPC_CCS_REG]
mww $CHIPC_CCS_REG [expr $ccs_reg_val | 0x2]

# Now that the chip is out of reset, increase the JTAG speed
adapter_khz 10000

# SRST does not currently reset the system properly - the following is required to work around this.

# Clear LR to avoid having the debugger think that there is a stack frame
reg lr   0x0

# Copy the ROM vectors to the FLOPS area
set FLOPS_ADDRESS 0

# reset instruction
mww [expr $FLOPS_ADDRESS + 0x0 ] 0xB03EF000

# all others zero
set vector_loc  0x04
while { ( $vector_loc < 32 ) } {
    mww [expr $vector_loc + $FLOPS_ADDRESS] 0x00000000
    set vector_loc [expr $vector_loc + 4]
}

# cleanup socsram settings
set SOCSRAM_X_INDEX  0x1800c010
set SOCSRAM_X_PDA    0x1800c044
mww $SOCSRAM_X_INDEX 0
mww $SOCSRAM_X_PDA   0x80000000
mww $SOCSRAM_X_INDEX 1
mww $SOCSRAM_X_PDA   0x80000000
mww $SOCSRAM_X_INDEX 2
mww $SOCSRAM_X_PDA   0x80000000
mww $SOCSRAM_X_INDEX 3
mww $SOCSRAM_X_PDA   0x80000000
mww $SOCSRAM_X_INDEX 4
mww $SOCSRAM_X_PDA   0x80000000
mww $SOCSRAM_X_INDEX 5
mww $SOCSRAM_X_PDA   0x80000000
mww $SOCSRAM_X_INDEX 6
mww $SOCSRAM_X_PDA   0x80000000
mww $SOCSRAM_X_INDEX 7
mww $SOCSRAM_X_PDA   0x80000000
