From a24c37a03db056b173ba38703a14fd32d3c31345 Mon Sep 17 00:00:00 2001
From: Broadcom WICED <broadcom_wiced@broadcom.local>
Date: Tue, 2 Apr 2013 15:18:29 +1100
Subject: [PATCH 03/20] Add initial functions for memory map support

---
 src/target/target.c | 160 ++++++++++++++++++++++++++++++++++++++++++++++++++++
 src/target/target.h |  17 ++++++
 2 files changed, 177 insertions(+)

diff --git a/src/target/target.c b/src/target/target.c
index 16005f1..51c8604 100644
--- a/src/target/target.c
+++ b/src/target/target.c
@@ -69,6 +69,7 @@ static int target_array2mem(Jim_Interp *interp, struct target *target,
 static int target_mem2array(Jim_Interp *interp, struct target *target,
 		int argc, Jim_Obj * const *argv);
 static int target_register_user_commands(struct command_context *cmd_ctx);
+static int add_memory_mapping(Jim_GetOptInfo *goi, struct target *target);
 static int target_get_gdb_fileio_info_default(struct target *target,
 		struct gdb_fileio_info *fileio_info);
 static int target_gdb_fileio_end_default(struct target *target, int retcode,
@@ -259,6 +260,8 @@ static const Jim_Nvp nvp_reset_modes[] = {
 	{ .name = NULL     , .value = -1 },
 };
 
+static struct memory_map_elem *memory_map_list_head = NULL;
+
 const char *debug_reason_name(struct target *t)
 {
 	const char *cp;
@@ -1017,6 +1020,32 @@ int target_run_flash_async_algorithm(struct target *target,
 int target_read_memory(struct target *target,
 		uint32_t address, uint32_t size, uint32_t count, uint8_t *buffer)
 {
+	if ( memory_map_list_head != NULL )
+	{
+		uint64_t bytes_read = 0;
+		struct memory_map_elem * curr_elem = memory_map_list_head;
+        memset( buffer, 0, count*size );
+		do {
+			uint64_t start = MAX( curr_elem->start_address, address );
+			uint64_t end   = MIN( curr_elem->start_address + curr_elem->size, address + count*size );
+
+			if ( ( end > start ) &&
+			     ( curr_elem->access != MEMORY_MAP_WRITE_ONLY)) {
+				int retval = target->type->read_memory(target, start, 1, (end - start), buffer);
+				if ( retval != 0 )
+				{
+					return retval;
+				}
+				bytes_read += (end - start);
+			}
+			curr_elem = curr_elem->next_elem;
+		} while ( curr_elem != NULL );
+		if (count*size != bytes_read) {
+			LOG_WARNING("Ignoring read of non readable area - Request address: 0x%X, Request size %d. Bytes successfully read: %d", address, count*size, (int)bytes_read);
+		}
+		return ERROR_OK;
+	}
+
 	if (!target_was_examined(target)) {
 		LOG_ERROR("Target not examined yet");
 		return ERROR_FAIL;
@@ -1037,6 +1066,31 @@ int target_read_phys_memory(struct target *target,
 int target_write_memory(struct target *target,
 		uint32_t address, uint32_t size, uint32_t count, const uint8_t *buffer)
 {
+	if ( memory_map_list_head != NULL )
+	{
+        uint64_t bytes_written = 0;
+		struct memory_map_elem * curr_elem = memory_map_list_head;
+		do {
+            uint64_t start = MAX( curr_elem->start_address, address );
+            uint64_t end   = MIN( curr_elem->start_address + curr_elem->size, address + count*size );
+
+            if ( ( end > start ) &&
+                 ( curr_elem->access != MEMORY_MAP_READ_ONLY)) {
+                int retval = target->type->write_memory(target, start, 1, (end - start), buffer);
+                if ( retval != 0 )
+                {
+                    return retval;
+                }
+                bytes_written += (end - start);
+			}
+			curr_elem = curr_elem->next_elem;
+		} while ( curr_elem != NULL );
+        if (count*size != bytes_written) {
+			LOG_WARNING("Ignoring write to non writable area - Request address: 0x%X, Request size %d. Bytes successfully written: %d", address, count*size, (int)bytes_written);
+        }
+		return ERROR_OK;
+	}
+
 	if (!target_was_examined(target)) {
 		LOG_ERROR("Target not examined yet");
 		return ERROR_FAIL;
@@ -4251,6 +4305,7 @@ enum target_cfg_param {
 	TCFG_CHAIN_POSITION,
 	TCFG_DBGBASE,
 	TCFG_RTOS,
+	TCFG_MEMORYMAP,
 };
 
 static Jim_Nvp nvp_config_opts[] = {
@@ -4265,6 +4320,7 @@ static Jim_Nvp nvp_config_opts[] = {
 	{ .name = "-chain-position",   .value = TCFG_CHAIN_POSITION },
 	{ .name = "-dbgbase",          .value = TCFG_DBGBASE },
 	{ .name = "-rtos",             .value = TCFG_RTOS },
+	{ .name = "-memorymap",        .value = TCFG_MEMORYMAP },
 	{ .name = NULL, .value = -1 }
 };
 
@@ -4539,6 +4595,17 @@ no_params:
 			}
 			/* loop for more */
 			break;
+
+		case TCFG_MEMORYMAP:
+			/* RTOS */
+			{
+				int result = add_memory_mapping(goi, target);
+				if (result != JIM_OK)
+					return result;
+			}
+			/* loop for more */
+			break;
+
 		}
 	} /* while (goi->argc) */
 
@@ -4547,6 +4614,99 @@ no_params:
 	return JIM_OK;
 }
 
+static int add_memory_mapping(Jim_GetOptInfo *goi, struct target *target)
+{
+	char *type_str;
+	enum memory_map_access type;
+	char *short_name = NULL;
+	char *long_name = NULL;
+	int64_t start_addr;
+	int64_t size;
+	int retval;
+
+	if ((goi->argc < 3) || (goi->argc > 6)) {
+		Jim_WrongNumArgs(goi->interp, goi->argc, goi->argv, "<type> <start_addr> <size> [short_name] [long_name] [parent]");
+		return JIM_ERR;
+	}
+
+	retval = Jim_GetOpt_String(goi, &type_str, NULL);
+	if (retval != JIM_OK)
+		return retval;
+	if (strcmp(type_str,"RW") == 0)
+	{
+		type = MEMORY_MAP_READ_WRITE;
+	}
+	else if (strcmp(type_str,"RO") == 0)
+	{
+		type = MEMORY_MAP_READ_ONLY;
+	}
+	else if (strcmp(type_str,"WO") == 0)
+	{
+		type = MEMORY_MAP_WRITE_ONLY;
+	}
+	else
+	{
+		Jim_SetResultFormatted(goi->interp,
+				"memory map field type must be \"RW\", \"RO\" or \"WO\"");
+		return JIM_ERR;
+	}
+
+	retval = Jim_GetOpt_Wide(goi, (long long*) &start_addr);
+	if (retval != JIM_OK)
+		return retval;
+
+	retval = Jim_GetOpt_Wide(goi, (long long*) &size);
+	if (retval != JIM_OK)
+		return retval;
+
+	if (goi->argc > 0)
+	{
+		retval = Jim_GetOpt_String(goi, &short_name, NULL);
+		if (retval != JIM_OK)
+			return retval;
+	}
+
+	if (goi->argc > 0)
+	{
+		retval = Jim_GetOpt_String(goi, &long_name, NULL);
+		if (retval != JIM_OK)
+			return retval;
+	}
+
+	struct memory_map_elem *new_item = (struct memory_map_elem *) malloc( sizeof(struct memory_map_elem) );
+	if ( new_item == NULL) {
+		Jim_SetResultFormatted(goi->interp,
+				"Failed to allocate space for new memory map item");
+		return JIM_ERR;
+	}
+
+	new_item->access = type;
+	new_item->short_name = strdup(short_name);
+	new_item->long_name = strdup(long_name);
+	new_item->size = size;
+	new_item->start_address = start_addr;
+	new_item->next_elem = NULL;
+
+	if ( memory_map_list_head == NULL )
+	{
+		memory_map_list_head = new_item;
+	}
+	else
+	{
+		struct memory_map_elem *curr_item = memory_map_list_head;
+		while ( curr_item->next_elem != NULL )
+		{
+			curr_item = curr_item->next_elem;
+		}
+		curr_item->next_elem = new_item;
+	}
+
+	return JIM_OK;
+
+}
+
+
+
 static int jim_target_configure(Jim_Interp *interp, int argc, Jim_Obj * const *argv)
 {
 	Jim_GetOptInfo goi;
diff --git a/src/target/target.h b/src/target/target.h
index 7471c1b..8ebdcd9 100644
--- a/src/target/target.h
+++ b/src/target/target.h
@@ -118,6 +118,23 @@ struct backoff_timer {
 	int count;
 };
 
+enum memory_map_access {
+	MEMORY_MAP_READ_WRITE,
+	MEMORY_MAP_READ_ONLY,
+	MEMORY_MAP_WRITE_ONLY,
+};
+
+struct memory_map_elem {
+	uint64_t                start_address;
+	uint64_t                size;
+	char *                  short_name;
+	char *                  long_name;
+	bool                    contiguous;
+	struct memory_map_elem* sub_elems;
+	struct memory_map_elem* next_elem;
+	enum memory_map_access  access;
+};
+
 /* split target registers into multiple class */
 enum target_register_class {
 	REG_CLASS_ALL,
-- 
1.8.3.msysgit.0

