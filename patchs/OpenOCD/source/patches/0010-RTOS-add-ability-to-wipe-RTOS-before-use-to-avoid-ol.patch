From d75cee0acc6d131b912ee1b8995ac55609b0a997 Mon Sep 17 00:00:00 2001
From: Broadcom WICED <broadcom_wiced@broadcom.local>
Date: Wed, 16 Apr 2014 11:05:13 +0100
Subject: [PATCH 24/40] RTOS: add ability to wipe RTOS before use to avoid old
 data in memory

Signed-off-by: Broadcom WICED <broadcom_wiced@broadcom.local>
---
 src/rtos/FreeRTOS.c | 21 +++++++++++++++++++++
 src/rtos/ThreadX.c  | 20 ++++++++++++++++++++
 src/rtos/rtos.c     | 26 +++++++++++++++++++++++++-
 src/rtos/rtos.h     |  3 +++
 src/target/target.c | 13 +++++++++++++
 src/target/target.h |  2 ++
 6 files changed, 84 insertions(+), 1 deletion(-)

diff --git a/src/rtos/FreeRTOS.c b/src/rtos/FreeRTOS.c
index 9348ca2..e4c3a46 100644
--- a/src/rtos/FreeRTOS.c
+++ b/src/rtos/FreeRTOS.c
@@ -94,6 +94,7 @@ static int FreeRTOS_create(struct target *target);
 static int FreeRTOS_update_threads(struct rtos *rtos);
 static int FreeRTOS_get_thread_reg_list(struct rtos *rtos, int64_t thread_id, char **hex_reg_list);
 static int FreeRTOS_get_symbol_list_to_lookup(symbol_table_elem_t *symbol_list[]);
+static int FreeRTOS_wipe(struct rtos *rtos);
 
 struct rtos_type FreeRTOS_rtos = {
 	.name = "FreeRTOS",
@@ -103,6 +104,7 @@ struct rtos_type FreeRTOS_rtos = {
 	.update_threads = FreeRTOS_update_threads,
 	.get_thread_reg_list = FreeRTOS_get_thread_reg_list,
 	.get_symbol_list_to_lookup = FreeRTOS_get_symbol_list_to_lookup,
+	.wipe = FreeRTOS_wipe,
 };
 
 enum FreeRTOS_symbol_values {
@@ -139,6 +141,25 @@ static const struct symbols FreeRTOS_symbol_list[] = {
 	{ NULL, false }
 };
 
+
+static int FreeRTOS_wipe(struct rtos *rtos)
+{
+	int retval = ERROR_FAIL;
+	uint8_t zeros[4] = { 0, 0, 0, 0 };
+	symbol_table_elem_t *sym = rtos->symbols;
+	while (sym->symbol_name != NULL) {
+		if  (sym->address == 0)
+			return ERROR_FAIL;
+
+		retval = target_write_buffer(rtos->target, sym->address, 4, zeros);
+		if (retval != ERROR_OK)
+			return retval;
+		LOG_DEBUG("Wiped rtos variable: %s at 0x%08X", sym->symbol_name, (uint32_t)sym->address);
+		sym++;
+	}
+	return retval;
+}
+
 /* TODO: */
 /* this is not safe for little endian yet */
 /* may be problems reading if sizes are not 32 bit long integers. */
diff --git a/src/rtos/ThreadX.c b/src/rtos/ThreadX.c
index ece85f4..7d7ddde 100644
--- a/src/rtos/ThreadX.c
+++ b/src/rtos/ThreadX.c
@@ -36,6 +36,7 @@ static int ThreadX_create(struct target *target);
 static int ThreadX_update_threads(struct rtos *rtos);
 static int ThreadX_get_thread_reg_list(struct rtos *rtos, int64_t thread_id, char **hex_reg_list);
 static int ThreadX_get_symbol_list_to_lookup(symbol_table_elem_t *symbol_list[]);
+static int ThreadX_wipe(struct rtos *rtos);
 
 struct ThreadX_thread_state {
 	int value;
@@ -115,8 +116,27 @@ const struct rtos_type ThreadX_rtos = {
 	.update_threads = ThreadX_update_threads,
 	.get_thread_reg_list = ThreadX_get_thread_reg_list,
 	.get_symbol_list_to_lookup = ThreadX_get_symbol_list_to_lookup,
+	.wipe = ThreadX_wipe,
 };
 
+static int ThreadX_wipe(struct rtos *rtos)
+{
+	int retval = ERROR_FAIL;
+	uint8_t zeros[4] = { 0, 0, 0, 0 };
+	symbol_table_elem_t *sym = rtos->symbols;
+	while (sym->symbol_name != NULL) {
+		if (sym->address == 0)
+			return ERROR_FAIL;
+
+		retval = target_write_buffer(rtos->target, sym->address, 4, zeros);
+		if (retval != ERROR_OK)
+			return retval;
+		LOG_DEBUG("Wiped rtos variable: %s at 0x%08X", sym->symbol_name, (uint32_t)sym->address);
+		sym++;
+	}
+	return retval;
+}
+
 static int ThreadX_update_threads(struct rtos *rtos)
 {
 	int retval;
diff --git a/src/rtos/rtos.c b/src/rtos/rtos.c
index 684f60d..59b918e 100644
--- a/src/rtos/rtos.c
+++ b/src/rtos/rtos.c
@@ -48,6 +48,7 @@ static struct rtos_type *rtos_types[] = {
 	NULL
 };
 
+static void rtos_wipe_if_needed(struct target *target);
 int rtos_thread_packet(struct connection *connection, const char *packet, int packet_size);
 
 int rtos_smp_init(struct target *target)
@@ -69,6 +70,7 @@ static int os_alloc(struct target *target, struct rtos_type *ostype)
 	os->current_thread = 0;
 	os->symbols = NULL;
 	os->target = target;
+	os->wiped = 0;
 
 	/* RTOS drivers can override the packet handler in _create(). */
 	os->gdb_thread_packet = rtos_thread_packet;
@@ -101,6 +103,12 @@ static int os_alloc_create(struct target *target, struct rtos_type *ostype)
 	return ret;
 }
 
+int rtos_set_wipe(Jim_GetOptInfo *goi, struct target *target)
+{
+	target->rtos_wipe = 1;
+	return ERROR_OK;
+}
+
 int rtos_create(Jim_GetOptInfo *goi, struct target *target)
 {
 	int x;
@@ -340,6 +348,7 @@ int rtos_thread_packet(struct connection *connection, char const *packet, int pa
 		if (rtos_qsymbol(connection, packet, packet_size) == 1) {
 			target->rtos_auto_detect = false;
 			target->rtos->type->create(target);
+			rtos_wipe_if_needed(target);
 			target->rtos->type->update_threads(target->rtos);
 		}
 		return ERROR_OK;
@@ -428,6 +437,8 @@ int rtos_get_gdb_reg_list(struct connection *connection)
 			(target->smp))) {	/* in smp several current thread are possible */
 		char *hex_reg_list;
 
+		rtos_wipe_if_needed(target);
+
 		LOG_DEBUG("RTOS: getting register list for thread 0x%" LOG_PRIx64
 				  ", target->rtos->current_thread=0x%" LOG_PRIx64 "\r\n",
 										current_threadid,
@@ -534,10 +545,23 @@ int rtos_try_next(struct target *target)
 	return 1;
 }
 
+static void rtos_wipe_if_needed(struct target *target)
+{
+	if ((target->rtos_wipe == 1) &&
+		(target->rtos != NULL) &&
+		(target->rtos->wiped == 0) &&
+		(target->rtos->type->wipe != NULL)) {
+		if (ERROR_OK == target->rtos->type->wipe(target->rtos))
+			target->rtos->wiped = 1;
+	}
+}
+
 int rtos_update_threads(struct target *target)
 {
-	if ((target->rtos != NULL) && (target->rtos->type != NULL))
+	if ((target->rtos != NULL) && (target->rtos->type != NULL)) {
+		rtos_wipe_if_needed(target);
 		target->rtos->type->update_threads(target->rtos);
+	}
 	return ERROR_OK;
 }
 
diff --git a/src/rtos/rtos.h b/src/rtos/rtos.h
index 7750f3c..7e7d7d2 100644
--- a/src/rtos/rtos.h
+++ b/src/rtos/rtos.h
@@ -58,6 +58,7 @@ struct rtos {
 	int thread_count;
 	int (*gdb_thread_packet)(struct connection *connection, char const *packet, int packet_size);
 	void *rtos_specific_params;
+	bool wiped;
 };
 
 struct rtos_type {
@@ -70,6 +71,7 @@ struct rtos_type {
 	int (*get_symbol_list_to_lookup)(symbol_table_elem_t *symbol_list[]);
 	int (*clean)(struct target *target);
 	char * (*ps_command)(struct target *target);
+	int (*wipe)(struct rtos *rtos);
 };
 
 struct stack_register_offset {
@@ -102,5 +104,6 @@ void rtos_free_threadlist(struct rtos *rtos);
 int rtos_smp_init(struct target *target);
 /*  function for handling symbol access */
 int rtos_qsymbol(struct connection *connection, char const *packet, int packet_size);
+int rtos_set_wipe(Jim_GetOptInfo *goi, struct target *target);
 
 #endif	/* RTOS_H */
diff --git a/src/target/target.c b/src/target/target.c
index 8d04804..84a7749 100644
--- a/src/target/target.c
+++ b/src/target/target.c
@@ -4305,6 +4305,7 @@ enum target_cfg_param {
 	TCFG_CHAIN_POSITION,
 	TCFG_DBGBASE,
 	TCFG_RTOS,
+	TCFG_RTOS_WIPE,
 	TCFG_MEMORYMAP,
 };
 
@@ -4320,6 +4321,7 @@ static Jim_Nvp nvp_config_opts[] = {
 	{ .name = "-chain-position",   .value = TCFG_CHAIN_POSITION },
 	{ .name = "-dbgbase",          .value = TCFG_DBGBASE },
 	{ .name = "-rtos",             .value = TCFG_RTOS },
+	{ .name = "-rtos-wipe",        .value = TCFG_RTOS_WIPE },
 	{ .name = "-memorymap",        .value = TCFG_MEMORYMAP },
 	{ .name = NULL, .value = -1 }
 };
@@ -4596,6 +4598,16 @@ no_params:
 			/* loop for more */
 			break;
 
+		case TCFG_RTOS_WIPE:
+			/* RTOS wipe*/
+			{
+				int result = rtos_set_wipe(goi, target);
+				if (result != JIM_OK)
+					return result;
+			}
+			/* loop for more */
+			break;
+
 		case TCFG_MEMORYMAP:
 			/* RTOS */
 			{
@@ -5432,6 +5444,7 @@ static int target_create(Jim_GetOptInfo *goi)
 
 	target->rtos = NULL;
 	target->rtos_auto_detect = false;
+	target->rtos_wipe = false;
 
 	/* Do the rest as "configure" options */
 	goi->isconfigure = 1;
diff --git a/src/target/target.h b/src/target/target.h
index 8ebdcd9..2469f87 100644
--- a/src/target/target.h
+++ b/src/target/target.h
@@ -203,6 +203,8 @@ struct target {
 	struct rtos *rtos;					/* Instance of Real Time Operating System support */
 	bool rtos_auto_detect;				/* A flag that indicates that the RTOS has been specified as "auto"
 										 * and must be detected when symbols are offered */
+	bool rtos_wipe;						/* A flag that indicates that the RTOS variables should be
+										 * wiped before use to avoid old values retained in memory */
 	struct backoff_timer backoff;
 	int smp;							/* add some target attributes for smp support */
 	struct target_list *head;
-- 
1.8.3.msysgit.0

